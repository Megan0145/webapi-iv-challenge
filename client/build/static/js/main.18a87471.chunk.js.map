{"version":3,"sources":["components/User.jsx","styles/index.js","components/Home.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["User","name","id","useState","posts","setPosts","useEffect","axios","get","then","res","concat","data","catch","err","console","log","map","post","key","text","StyledApp","styled","div","Home","users","user","Navbar","to","exact","path","render","props","App","setUsers","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAGe,SAASA,EAAT,GAA6B,IAAbC,EAAY,EAAZA,KAAMC,EAAM,EAANA,GAAM,EACfC,mBAAS,IADM,mBAClCC,EADkC,KAC3BC,EAD2B,KAazC,OAVAC,qBAAU,WACRC,IACGC,IADH,qBACqBN,EADrB,WAEGO,MAAK,SAAAC,GACJL,EAASD,EAAMO,OAAOD,EAAIE,UAE3BC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,IACEV,EAIH,6BACE,4BAAKH,GACL,6BACE,uCACA,4BACGG,EAAMa,KAAI,SAAAC,GACT,OAAO,wBAAIC,IAAKD,EAAKhB,IAAKgB,EAAKE,YAThC,yC,+JCfJ,IAAMC,E,MAAYC,EAAOC,IAAV,K,eCCP,SAASC,EAAT,GAA0B,IAAVC,EAAS,EAATA,MAC7B,OACE,6BACE,6BACGA,EAAMR,KAAI,SAAAS,GACT,OAAO,kBAAC1B,EAAD,CAAMmB,IAAKO,EAAKxB,GAAID,KAAMyB,EAAKzB,KAAMC,GAAIwB,EAAKxB,UCLhD,SAASyB,EAAT,GAA4B,IAAVF,EAAS,EAATA,MAC/B,OACE,6BACE,6BACE,kBAAC,IAAD,CAAMG,GAAG,KAAT,SAEF,8BACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,OAAQ,SAAAC,GACN,OAAO,kBAACR,EAAD,CAAMC,MAAOA,SCmBjBQ,MA1Bf,WAAgB,IAAD,EACa9B,mBAAS,MADtB,mBACNsB,EADM,KACCS,EADD,KAab,OAXA5B,qBAAU,WACRC,IACGC,IAAI,cACJC,MAAK,SAAAC,GACJwB,EAASxB,EAAIE,SAEdC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,IAEEW,EAKH,kBAAC,IAAD,KACE,kBAACJ,EAAD,KACE,kBAACM,EAAD,CAAQF,MAAOA,MANZ,0CCTSU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.18a87471.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function User({ name, id }) {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(`/api/users/${id}/posts`)\n      .then(res => {\n        setPosts(posts.concat(res.data));\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n  if (!posts) {\n    return <p>Loading...</p>;\n  }\n  return (\n    <div>\n      <h1>{name}</h1>\n      <div>\n        <h3>Posts: </h3>\n        <ul>\n          {posts.map(post => {\n            return <li key={post.id}>{post.text}</li>;\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import styled from 'styled-components';\n\nexport const StyledApp = styled.div`\n    background-color: whitesmoke;\n    width: 100vw;\n    height: 100vh;\n\n`","import React from \"react\";\nimport User from \"./User\";\n\nexport default function Home({ users }) {\n  return (\n    <div>\n      <div>\n        {users.map(user => {\n          return <User key={user.id} name={user.name} id={user.id}/>;\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nexport default function Navbar({ users }) {\n  return (\n    <div>\n      <nav>\n        <Link to=\"/\">Home</Link>\n      </nav>\n      <main>\n        <Route\n          exact\n          path=\"/\"\n          render={props => {\n            return <Home users={users} />;\n          }}\n        />\n      </main>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport User from \"./components/User\";\nimport { StyledApp } from \"./styles\";\nimport Navbar from \"./components/Navbar\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n  const [users, setUsers] = useState(null);\n  useEffect(() => {\n    axios\n      .get(\"/api/users\")\n      .then(res => {\n        setUsers(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  if (!users) {\n    return <p>Loading...</p>;\n  }\n\n  return (\n    <Router>\n      <StyledApp>\n        <Navbar users={users}/>\n      </StyledApp>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}